"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeOutputJSON = exports.createSingleOutputDirectory = exports.formatPageObject = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const prettier_1 = require("prettier");
/**
 * format JSON string with tabs
 * @param pageObject JSON object
 * @returns string
 */
function formatPageObject(pageObject) {
    // FIXME - add to generator options
    const prettierOptions = {
        parser: 'json',
        tabWidth: 4,
        trailingComma: 'all',
        singleQuote: true,
        printWidth: 120,
    };
    const jsonString = JSON.stringify(pageObject, null, 4);
    return prettier_1.format(jsonString, prettierOptions);
}
exports.formatPageObject = formatPageObject;
/**
 * If configured create one output folder for all generated JSON files
 * @param runnerConfig generator runner configuration
 * @returns name of the folder or undefined if was not created
 */
function createSingleOutputDirectory(runnerConfig) {
    // depending on config we might need to create one output folder for all POs
    const { outputDir, inputRootDir, relativeOutputDir } = runnerConfig;
    if (!relativeOutputDir) {
        // if output dir is not relative - create one output folder for all generated JSON files
        const commonOutputFolder = path_1.default.resolve(inputRootDir, outputDir);
        if (commonOutputFolder && !fs_1.default.existsSync(commonOutputFolder)) {
            fs_1.default.mkdirSync(commonOutputFolder);
        }
        return commonOutputFolder;
    }
    return undefined;
}
exports.createSingleOutputDirectory = createSingleOutputDirectory;
/**
 * create output dir for main output file
 * @param absoluteSourcePath absolute path to main HTML source file
 * @param runnerConfig generator runner configuration
 * @param commonOutputDir depending on config, output folder might already exist
 * @returns string with directory path
 */
function buildMainOutputDir(absoluteSourcePath, runnerConfig, commonOutputDir) {
    if (commonOutputDir) {
        // folder already created
        return commonOutputDir;
    }
    const { outputDir } = runnerConfig;
    const dir = path_1.default.resolve(path_1.default.dirname(absoluteSourcePath), outputDir);
    if (!fs_1.default.existsSync(dir)) {
        fs_1.default.mkdirSync(dir);
    }
    return dir;
}
/**
 * write one generated UTAM JSON file
 * @param output generated UTAM JSON
 * @param absoluteSourcePath absolute path to main HTML source file
 * @returns string with output path
 */
function writeOutputJSON(output, absoluteSourcePath, runnerConfig, commonOutputDir) {
    const { outputFileExtension, overrideExisting } = runnerConfig;
    const { pageObjectName, pageObject } = output;
    const outputDirPath = buildMainOutputDir(absoluteSourcePath, runnerConfig, commonOutputDir);
    const outputPath = path_1.default.resolve(outputDirPath, `${pageObjectName}${outputFileExtension}`);
    const generatedStr = formatPageObject(pageObject);
    if (!fs_1.default.existsSync(outputPath) || overrideExisting) {
        fs_1.default.writeFileSync(outputPath, generatedStr, 'utf8');
    }
    else {
        console.log(`WARNING file ${outputPath} already exists, skip overriding...`);
    }
    return outputPath;
}
exports.writeOutputJSON = writeOutputJSON;
//# sourceMappingURL=writer.js.map