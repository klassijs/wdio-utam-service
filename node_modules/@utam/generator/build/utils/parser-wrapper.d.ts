import * as parse5 from 'parse5';
export declare type Node = parse5.Node;
export declare type Element = parse5.Element;
export declare type TextNode = parse5.TextNode;
/**
 * Wrapper function to check if node has attribute and return its value
 * @param element HTML element
 * @param attrName name of the attribute
 */
export declare function getAttribute(element: Element, attrName: string): string | undefined;
/**
 * check if current element has one of the attributes
 * @param element current element
 * @param attrNames names
 * @returns true if HTML element has one of the attributes with given names
 */
export declare function hasAttribute(element: Element, attrNames: string[]): boolean;
/**
 * Wrapper function to check if node has name and hence is an element
 * @param node HTML node
 * @returns boolean true if it has
 */
export declare function isElementNode(node: any): node is Element;
/**
 * Wrapper function to check if node is a text
 * @param node HTML node
 * @returns boolean true if it is
 */
export declare function isTextNode(node: any): node is TextNode;
/**
 * Wrapper function to get node name (for HTML node it's same as tag)
 * @param node HTML node
 * @returns string tag
 */
export declare function getName(node: Node): string;
/**
 * Wrapper function to get child nodes
 * @param parent parent element
 * @returns array of elements
 */
export declare function getChildElements(parent: Element): (Element | TextNode)[];
/**
 * check if element has child elements
 * @param element HTML element
 * @returns true if there are children
 */
export declare function hasChildElements(element: Element): boolean;
/**
 * find first HTML element and treat it like root node
 * @param htmlString HTML as a string
 * @returns root element or undefined
 */
export declare function getRootNode(htmlString: string): Element | undefined;
//# sourceMappingURL=parser-wrapper.d.ts.map