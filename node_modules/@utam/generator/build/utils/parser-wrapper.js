"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRootNode = exports.hasChildElements = exports.getChildElements = exports.getName = exports.isTextNode = exports.isElementNode = exports.hasAttribute = exports.getAttribute = void 0;
// we don't import types as we export wrapper types
const parse5 = __importStar(require("parse5"));
/**
 * Wrapper function to check if node has attribute and return its value
 * @param element HTML element
 * @param attrName name of the attribute
 */
function getAttribute(element, attrName) {
    const attributes = element.attrs;
    for (const attribute of attributes) {
        if (attrName === attribute.name) {
            return attribute.value;
        }
    }
    return undefined;
}
exports.getAttribute = getAttribute;
/**
 * check if current element has one of the attributes
 * @param element current element
 * @param attrNames names
 * @returns true if HTML element has one of the attributes with given names
 */
function hasAttribute(element, attrNames) {
    return attrNames.some((attrName) => getAttribute(element, attrName));
}
exports.hasAttribute = hasAttribute;
/**
 * Wrapper function to check if node has name and hence is an element
 * @param node HTML node
 * @returns boolean true if it has
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isElementNode(node) {
    return node && 'tagName' in node;
}
exports.isElementNode = isElementNode;
/**
 * Wrapper function to check if node is a text
 * @param node HTML node
 * @returns boolean true if it is
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isTextNode(node) {
    if (node && 'nodeName' in node && node.nodeName === '#text') {
        // check for empty text, otherwise can be next line (\n)
        const rawText = cleanTextNode(node.value);
        return rawText.length > 0;
    }
    return false;
}
exports.isTextNode = isTextNode;
/**
 * for element "template" we have to parse content, not itself
 * @param templateElement element with template
 * @returns fragment of the document inside template
 */
function getTemplateContent(templateElement) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return templateElement.content;
}
/**
 * Wrapper function to get node name (for HTML node it's same as tag)
 * @param node HTML node
 * @returns string tag
 */
function getName(node) {
    if (isElementNode(node)) {
        return node.tagName;
    }
    return 'null';
}
exports.getName = getName;
/**
 * If element is a template, we need its content to get children
 * @param parent parent element
 * @returns child nodes
 */
function getChildNodes(parent) {
    return (getTemplateContent(parent) ?? parent).childNodes;
}
/**
 * Wrapper function to get child nodes
 * @param parent parent element
 * @returns array of elements
 */
function getChildElements(parent) {
    const childNodes = getChildNodes(parent);
    const children = [];
    if (childNodes) {
        childNodes.forEach((child) => {
            if (isElementNode(child) || isTextNode(child)) {
                children.push(child);
            }
        });
    }
    return children;
}
exports.getChildElements = getChildElements;
/**
 * check if element has child elements
 * @param element HTML element
 * @returns true if there are children
 */
function hasChildElements(element) {
    const childElements = getChildElements(element);
    return childElements.length > 0;
}
exports.hasChildElements = hasChildElements;
/**
 * recursively try to traverse HTML nodes searching for a root
 * @param htmlRoot root candidate
 * @returns first eligible HTML element or undefined
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function traverseForHTMLroot(htmlRoot) {
    if (!htmlRoot) {
        return undefined;
    }
    if (isElementNode(htmlRoot)) {
        return htmlRoot;
    }
    if (!htmlRoot.childNodes) {
        return undefined;
    }
    for (const child of htmlRoot.childNodes) {
        const rootCandidate = traverseForHTMLroot(child);
        if (rootCandidate) {
            return rootCandidate;
        }
    }
    return undefined;
}
/**
 * find first HTML element and treat it like root node
 * @param htmlString HTML as a string
 * @returns root element or undefined
 */
function getRootNode(htmlString) {
    // document can start from comments, hence "includes"
    const isFragment = !htmlString.includes('<html');
    // if HTML source starts with html tag, use parse vs. parseFragment, otherwise result is empty
    const htmlRoot = isFragment ? parse5.parseFragment(htmlString) : parse5.parse(htmlString);
    return traverseForHTMLroot(htmlRoot);
}
exports.getRootNode = getRootNode;
// https://github.com/babel/babel/blob/d33d02359474296402b1577ef53f20d94e9085c4/packages/babel-types/src/react.js#L9-L55
function cleanTextNode(value) {
    const lines = value.split(/\r\n|\n|\r/);
    let lastNonEmptyLine = 0;
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].match(/[^ \t]/)) {
            lastNonEmptyLine = i;
        }
    }
    let str = '';
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const isFirstLine = i === 0;
        const isLastLine = i === lines.length - 1;
        const isLastNonEmptyLine = i === lastNonEmptyLine;
        let trimmedLine = line.replace(/\t/g, ' ');
        if (!isFirstLine) {
            trimmedLine = trimmedLine.replace(/^[ ]+/, '');
        }
        if (!isLastLine) {
            trimmedLine = trimmedLine.replace(/[ ]+$/, '');
        }
        if (trimmedLine) {
            if (!isLastNonEmptyLine) {
                trimmedLine += ' ';
            }
            str += trimmedLine;
        }
    }
    return str;
}
//# sourceMappingURL=parser-wrapper.js.map