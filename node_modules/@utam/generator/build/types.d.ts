import { UtamPageObject, UtamElementType, UtamComposeMethod } from '@utam/types';
export declare type BasicTypeRule = {
    type: UtamElementType;
    rule: TypeRule;
};
export declare type TypeRule = TypeRuleByAttributeValue | TypeRuleByAttributeName | TypeRuleByTagName;
export declare type TypeRuleByTagName = {
    tagNames: string[];
};
export declare type TypeRuleByAttributeName = {
    attrNames: string[];
};
export declare type TypeRuleByAttributeValue = {
    tagNames: string[];
    attrValues: {
        [name: string]: string[];
    };
};
/**
 * Generation output helper object
 */
export interface GenerationOutput {
    /**
     * short name of the page object, ex. "myComponent"
     */
    pageObjectName: string;
    /**
     * generated JSON object
     */
    pageObject: UtamPageObject;
}
/**
 * document traversal context
 */
export interface DocumentTraversalContext {
    /**
     * element names tracker
     * key - already used names, value - index of the name
     */
    elementNames: Map<string, number>;
    /**
     * names of the elements used in methods
     * key - element name, value - method name
     */
    usedElements: Map<string, string[]>;
    /**
     * methods tracker, key is method name
     */
    methods: Map<string, UtamComposeMethod>;
    /**
     * generated object name, used for error messages
     */
    pageObjectName: string;
    /**
     * mapping between selector and already known custom type
     * key - type name like "myComponent", value - generation result
     */
    generatedTypes: Map<string, GenerationOutput>;
}
//# sourceMappingURL=types.d.ts.map