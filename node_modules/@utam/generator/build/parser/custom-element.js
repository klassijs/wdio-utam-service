"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCustomSelectorString = exports.buildCustomElementType = exports.buildCustomElementName = void 0;
const parser_wrapper_1 = require("../utils/parser-wrapper");
const parser_utils_1 = require("../utils/parser-utils");
/**
 * Get namespace from custom element tag
 * @param customElement HTML element
 * @returns string with namespace
 */
function getCustomTagNamespace(customElement) {
    const htmlTag = parser_wrapper_1.getName(customElement);
    return htmlTag.split('-')[0];
}
/**
 * utility method to transform tag name with '-' to camel case
 * @param customElement HTML element
 * @returns string
 */
function getCustomTagCamelCaseName(customElement) {
    const htmlTag = parser_wrapper_1.getName(customElement);
    return parser_utils_1.kebabCaseToCamelCase(htmlTag);
}
/**
 * Build name of the generated element
 * @param element source HTML element
 * @returns string with name
 */
function buildCustomElementName(element) {
    return `${getCustomTagCamelCaseName(element)}`;
}
exports.buildCustomElementName = buildCustomElementName;
/**
 * Check if the given node is a custom element and return its type
 * @param node HTML element node
 * @param config generator config
 * @returns custom type or undefined if element is not a match
 */
function buildCustomElementType(node, config) {
    const { defaultNamespace, namespaces, ignoreCustomTags } = config;
    const tagName = parser_wrapper_1.getName(node);
    if (!tagName.includes('-')) {
        return undefined;
    }
    const namespace = getCustomTagNamespace(node);
    const camelCaseName = getCustomTagCamelCaseName(node);
    const configuredNamespace = namespaces[namespace] ? namespaces[namespace] : defaultNamespace;
    const customTypeString = `${configuredNamespace}${camelCaseName}`;
    const isTraverseContent = ignoreCustomTags.includes(tagName);
    const generatedType = isTraverseContent ? [] : customTypeString;
    return { isTraverseContent, generatedType, customTypeShortName: camelCaseName };
}
exports.buildCustomElementType = buildCustomElementType;
/**
 * Build relative selector string for "css"
 * @param element HTML element
 * @returns string with CSS selector
 */
function buildCustomSelectorString(element, config, scopeCss) {
    return parser_utils_1.getSelectorFromAttributes(element, config, scopeCss);
}
exports.buildCustomSelectorString = buildCustomSelectorString;
//# sourceMappingURL=custom-element.js.map