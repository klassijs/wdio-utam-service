"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scan = exports.scanSyncRelativeDir = void 0;
const fast_glob_1 = __importDefault(require("fast-glob"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("./utils/constants");
const HTML_EXT = '.htm';
const isInputFile = (filePath, exclude) => filePath.includes(HTML_EXT) && !exclude.find((excludeFile) => filePath.includes(excludeFile));
/**
 * sync scanner version (vanilla JS does not accept async)
 * @param relativeRootDir relative path from the caller's dir
 * @returns all found absolute file paths
 */
function scanSyncRelativeDir(relativeRootDir) {
    const inputRootDir = path_1.default.join(__dirname, relativeRootDir);
    return fast_glob_1.default
        .sync(constants_1.DEFAULT_INPUT_FILE_MASKS, {
        cwd: inputRootDir,
    })
        .filter((path) => isInputFile(path, []))
        .map((foundHTMLFile) => path_1.default.resolve(inputRootDir, foundHTMLFile));
}
exports.scanSyncRelativeDir = scanSyncRelativeDir;
/**
 * scan inputRootDir to find all HTML files
 * @param runnerConfig runner configuration
 * @returns all found absolute file paths
 */
async function scan(runnerConfig) {
    const { inputRootDir, inputFileMask, ignore } = runnerConfig;
    const inputPathStream = fast_glob_1.default.stream(inputFileMask, {
        cwd: inputRootDir,
        ignore,
    });
    const foundHTMLFiles = [];
    for await (const entry of inputPathStream) {
        // path to HTML file relative to inputRootDir
        const entryAsStr = entry.toString();
        if (isInputFile(entryAsStr, ignore ?? [])) {
            foundHTMLFiles.push(path_1.default.resolve(inputRootDir, entryAsStr));
        }
    }
    return foundHTMLFiles;
}
exports.scan = scan;
//# sourceMappingURL=scanner.js.map