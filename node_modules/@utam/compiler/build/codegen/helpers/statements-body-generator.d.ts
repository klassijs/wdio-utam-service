import { ExplicitUtamArgument, MethodArgumentsTypeMap, MethodArgumentsDescriptionMap, UtamElementType, UtamMatcher } from '@utam/types';
import { ReturnType } from '../../utils/return-types';
import { TypeIdentifiers } from './class-body-generator';
import { StatementsContext } from './statements-transformer';
export interface StatementsBasedMethodAst {
    methodName: string;
    statements: MethodStatementAst[];
    orderedArgs: string[];
    description: string[];
    argsTypeMap: MethodArgumentsTypeMap;
    argsDescriptionMap: MethodArgumentsDescriptionMap;
}
export interface ComposeMethodAst extends StatementsBasedMethodAst {
    isPublic: boolean;
    methodName: string;
    orderedArgs: string[];
    typeConstructor: string;
    returnsList: boolean;
    statements: MethodStatementAst[];
}
interface ChainStatementAst {
    isChain: boolean;
    returnType: ReturnType;
    returnsList: boolean;
    applyFunction: string;
    applyFunctionArgs?: ExplicitUtamArgument[];
    matcher?: UtamMatcher;
}
interface SelfStatementAst {
    elementName: 'self';
    isChain: boolean;
    returnType: ReturnType;
    returnsList: boolean;
    applyFunction: string;
    applyFunctionArgs?: ExplicitUtamArgument[];
    matcher?: UtamMatcher;
}
interface ExtensionStatementAst {
    applyFunction: string;
    applyFunctionArgs?: ExplicitUtamArgument[];
    moduleReference?: string;
    returnType: ReturnType;
    returnsList?: boolean;
}
interface RegularStatementAst {
    elementName: string;
    elementType: UtamElementType;
    elementNullable: boolean;
    elementGetMethod: string;
    elementArgs?: string[];
    returnType: ReturnType;
    returnsList: boolean;
    isChain: boolean;
    applyFunction: string;
    applyFunctionArgs?: ExplicitUtamArgument[];
    matcher?: UtamMatcher;
}
export declare type MethodStatementAst = RegularStatementAst | ExtensionStatementAst | SelfStatementAst | ChainStatementAst;
/**
 * generate code for a method composed of declared statements
 *
 * @param astConfig context of the current page object with elements and methods information
 * @param methodAst abstract representation of the method declared in JSON
 */
export declare function generateComposeMethodCode(context: StatementsContext, methodAst: StatementsBasedMethodAst, typeIdentifiers: TypeIdentifiers): string;
export {};
//# sourceMappingURL=statements-body-generator.d.ts.map