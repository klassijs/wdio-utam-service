"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Renderer = void 0;
const code_1 = require("../utils/code");
const imports_1 = require("../utils/imports");
const block_declarations_1 = require("./block-declarations");
const class_body_1 = require("./class-body");
class Renderer {
    constructor() {
        this._declarations = new block_declarations_1.BlockDeclarations();
    }
    createClassBody(className = 'UnknownPageObjectName', rootSelector, opts) {
        this._classBody = new class_body_1.ClassBody(className, rootSelector, opts);
    }
    get classBody() {
        if (!this._classBody) {
            throw new Error('Class body must be created before accessing it');
        }
        return this._classBody;
    }
    get declarations() {
        return this._declarations;
    }
    addElementMethod(config) {
        return this.classBody.addElementMethod(config);
    }
    applyRootOptions(opts) {
        return this.classBody.applyRootOptions(opts);
    }
    addCustomMethod(method) {
        return this.classBody.addCustomMethod(method);
    }
    addSelectorFunctionDeclaration(selector, context) {
        return this._declarations.addSelectorFunctionDeclaration(selector, context);
    }
    addFilterFunctionDeclaration(filter, context) {
        return this._declarations.addFilterFunctionDeclaration(filter, context);
    }
    addFilterApplicationFunctionDeclaration(filter, context) {
        return this._declarations.addFilterApplicationFunctionDeclaration(filter, context);
    }
    render(alias) {
        const { _classBody: classBody, declarations } = this;
        if (!classBody) {
            throw new Error('Unexpected error: ClassBody should have been defined');
        }
        // Generate the source code and the imports separately (so we can dedupe them)
        const { code: classBodySource = '', typeDefinition: classBodyTypeDef = '' } = classBody.render();
        const declarationsSource = declarations.render();
        const declarationImports = Array.from(declarations.imports.entries());
        const classBodyImports = Array.from(classBody.imports.entries());
        const classBodyTypedImports = Array.from(classBody.typedImports.entries());
        const classBodySharedImports = Array.from(classBody.sharedImports.entries());
        const classBodyUtilityImports = Array.from(classBody.utilityImports.entries());
        // We collect the import from both body and declaration so we can dedupe them
        const pageObjectImports = imports_1.generateImports([...declarationImports, ...classBodyImports, ...classBodySharedImports, ...classBodyUtilityImports], alias);
        const pageObjectTypedImports = imports_1.generateImports([...classBodyTypedImports, ...classBodySharedImports], alias);
        const pageObjectCode = code_1.code `
            ${pageObjectImports}

            ${declarationsSource}

            ${classBodySource}
        `;
        const pageObjectTypeDefinition = code_1.code `
            ${pageObjectTypedImports}

            ${classBodyTypeDef}
        `;
        return {
            code: pageObjectCode,
            typeDefinition: pageObjectTypeDefinition,
        };
    }
}
exports.Renderer = Renderer;
//# sourceMappingURL=renderer.js.map