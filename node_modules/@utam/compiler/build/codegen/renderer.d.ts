import { UtamFilter, UtamSelector, UtamMethod } from '@utam/types';
import { BlockDeclarations, FunctionDeclarationContext } from './block-declarations';
import { ClassBody, ClassBodyOptions, ElementMethodConfig, RootElementOptions } from './class-body';
export declare class Renderer {
    private _classBody?;
    private _declarations;
    createClassBody(className?: string, rootSelector?: UtamSelector, opts?: ClassBodyOptions): void;
    get classBody(): ClassBody;
    get declarations(): BlockDeclarations;
    addElementMethod(config: ElementMethodConfig): string;
    applyRootOptions(opts: RootElementOptions): string;
    addCustomMethod(method: UtamMethod): string;
    addSelectorFunctionDeclaration(selector: UtamSelector, context: FunctionDeclarationContext): string;
    addFilterFunctionDeclaration(filter: UtamFilter, context: FunctionDeclarationContext): string;
    addFilterApplicationFunctionDeclaration(filter: UtamFilter, context: FunctionDeclarationContext): string;
    render(alias: Record<string, string>): {
        code: string;
        typeDefinition: string;
    };
}
//# sourceMappingURL=renderer.d.ts.map