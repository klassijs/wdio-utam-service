"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockDeclarations = void 0;
const imports_1 = require("../utils/imports");
const naming_1 = require("../utils/naming");
const block_declarations_generator_1 = require("./helpers/block-declarations-generator");
const shared_1 = require("./shared");
let UID = 0;
class BlockDeclarations {
    constructor() {
        this.imports = new Map();
        this._selectorDeclarations = [];
        this._filterDeclarations = [];
        this._filterApplicationDeclarations = [];
    }
    addSelectorFunctionDeclaration(selector, opts) {
        const plural = selector.returnAll ? 's' : '';
        const name = opts.name
            ? `_utam_get_${naming_1.kebabcaseToCamelcase(opts.name, true)}${plural}`
            : `_utam_get_uuid${++UID}`;
        const isContainerDeclaration = !!opts.isContainer;
        this._selectorDeclarations.push({
            name,
            selector,
            nullable: opts.nullable ?? false,
            parentNullable: opts.parentNullable ?? false,
            parentName: opts.parentName,
            parentArgs: opts.parentArgs || [],
            isContainer: isContainerDeclaration,
            insideShadow: !!opts.insideShadow,
            parentSelectorReturnsList: opts.parentSelectorReturnsList ?? false,
            parentFilterApplicationName: opts.parentFilterApplicationName,
        });
        if (!this._byIdentifier) {
            this._byIdentifier = this.addImport(shared_1.UTAM_CORE_MODULE, shared_1.UTAM_LOCATOR_BY);
        }
        if (!this._insideShadowIdentifier && opts.insideShadow) {
            this._insideShadowIdentifier = this.addImport(shared_1.UTAM_CORE_MODULE, shared_1.UTAM_SHADOW_CLASS);
        }
        return name;
    }
    addFilterFunctionDeclaration(filter, opts) {
        const name = opts.name ? `_utam_filter_${naming_1.kebabcaseToCamelcase(opts.name, true)}` : `_utam_filter_uuid${++UID}`;
        this._filterDeclarations.push({ name, filter, parentArgs: [] });
        return name;
    }
    /**
     * Generates the name of the hoisted function that apply a filter to a parent element and push the required
     * information for code generation in the AST.
     *
     * @param filter element filter object coming from the JSON page object
     * @param opts context that holds the information to push in the AST
     * @returns the name of function that applies the filter to the parent elements
     */
    addFilterApplicationFunctionDeclaration(filter, opts) {
        const name = opts.name
            ? `_utam_apply_filter_${naming_1.kebabcaseToCamelcase(opts.name, true)}`
            : `_utam_apply_filter_uuid${++UID}`;
        this._filterApplicationDeclarations.push({
            name,
            filter,
            elementName: opts.name ?? UID,
            parentArgs: opts.parentArgs ?? [],
            filterFunctionName: opts.filterFunctionIdentifier ?? `_utam_filter_uuid${UID}`,
        });
        return name;
    }
    addImport(module, name) {
        return imports_1.addImport(module, name, this.imports);
    }
    render() {
        const { _filterDeclarations, _filterApplicationDeclarations, _selectorDeclarations, _byIdentifier: byId, _insideShadowIdentifier: shadowId, } = this;
        block_declarations_generator_1.validateState(_selectorDeclarations, byId);
        const filterDeclarations = _filterDeclarations.map((ast) => block_declarations_generator_1.generateFilterDeclarationCode(ast, byId));
        const selectorDeclarations = _selectorDeclarations.map((ast) => block_declarations_generator_1.generateSelectorDeclarationCode(ast, { byId, shadowId }));
        const filterApplicationDeclarations = _filterApplicationDeclarations.map((ast) => block_declarations_generator_1.generateFilterApplicationDeclarationCode(ast));
        return [...filterDeclarations, ...filterApplicationDeclarations, ...selectorDeclarations].join('\n\n');
    }
}
exports.BlockDeclarations = BlockDeclarations;
//# sourceMappingURL=block-declarations.js.map