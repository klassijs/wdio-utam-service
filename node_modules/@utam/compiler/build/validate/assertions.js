"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsObject = exports.assertNotNullObject = exports.assertIsArrayMemberObject = exports.assertNotEmptyArray = exports.assertOptionalNotEmptyArray = exports.assertArrayMemberIsString = exports.assertHasNotEmptyString = exports.assertNotEmptyString = void 0;
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const jsonc_parser_1 = require("jsonc-parser");
const errors_1 = require("../utils/errors");
/**
 * check that property is a non empty string
 * @param node JSON node
 * @param parserContext context of the validation, ex. method or element name
 * @param propertyName name of the property
 */
function assertNotEmptyString(node, parserContext, propertyName) {
    if (node.type !== 'string') {
        throw new errors_1.UtamCompilerValidationError(node, 10, [parserContext, propertyName, node.type]);
    }
    if (node.value.length === 0) {
        throw new errors_1.UtamCompilerValidationError(node, 10, [parserContext, propertyName, 'empty string']);
    }
    return node.value;
}
exports.assertNotEmptyString = assertNotEmptyString;
/**
 * Check that parent node contains given property and it's a non-empty string
 * @param parentNode JSON node
 * @param parserContext validation context
 * @param objectName name of the property
 * @returns non empty value
 */
function assertHasNotEmptyString(parentNode, parserContext, objectName) {
    const node = jsonc_parser_1.findNodeAtLocation(parentNode, [objectName]);
    if (!node) {
        throw new errors_1.UtamCompilerValidationError(parentNode, 10, [parserContext, objectName, 'undefined']);
    }
    return assertNotEmptyString(node, parserContext, objectName);
}
exports.assertHasNotEmptyString = assertHasNotEmptyString;
/**
 * Check that each array member is a non empty string
 * @param node JSON node
 * @param structure context of the validation, ex. method or element name
 * @param key name of the array property
 */
function assertArrayMemberIsString(node, structure, key) {
    const parserContext = `${structure}, "${key}" array`;
    if (node.children) {
        for (const memberNode of node.children) {
            if (memberNode.type !== 'string') {
                throw new errors_1.UtamCompilerValidationError(node, 11, [parserContext, memberNode.type]);
            }
            if (!memberNode.value || memberNode.value.length === 0) {
                throw new errors_1.UtamCompilerValidationError(node, 11, [parserContext, 'empty string']);
            }
        }
    }
}
exports.assertArrayMemberIsString = assertArrayMemberIsString;
/**
 * Check that node is an array
 * @param node JSON node
 * @param structure validation context
 * @param objectName property name
 */
function assertOptionalNotEmptyArray(node, structure, objectName) {
    if (node.type !== 'array' || !node.children || node.children.length === 0) {
        throw new errors_1.UtamCompilerValidationError(node, 12, [structure, objectName]);
    }
}
exports.assertOptionalNotEmptyArray = assertOptionalNotEmptyArray;
/**
 * Check that parent node contains given property and it's non empty array
 * @param parentNode JSON node
 * @param structure validation context
 * @param objectName property name
 */
function assertNotEmptyArray(parentNode, structure, objectName) {
    const node = jsonc_parser_1.findNodeAtLocation(parentNode, [objectName]);
    if (!node) {
        throw new errors_1.UtamCompilerValidationError(parentNode, 12, [structure, objectName]);
    }
    assertOptionalNotEmptyArray(node, structure, objectName);
    return node;
}
exports.assertNotEmptyArray = assertNotEmptyArray;
/**
 * check that array member is an object, does not need key name because it's not a map
 * @param node - JSON node to check
 * @param structure - string to identify structure
 * @param objectName - name of the object in array
 */
function assertIsArrayMemberObject(node, structure, objectName) {
    if (node.type !== 'object') {
        throw new errors_1.UtamCompilerValidationError(node, 13, [structure, objectName]);
    }
}
exports.assertIsArrayMemberObject = assertIsArrayMemberObject;
/**
 * Check that parent node contains given property and it's non null object
 * @param parentNode JSON node
 * @param structure validation context
 * @param objectName property name
 */
function assertNotNullObject(parentNode, structure, objectName) {
    const node = jsonc_parser_1.findNodeAtLocation(parentNode, [objectName]);
    const propertyName = `property "${objectName}"`;
    if (!node || node.type !== 'object') {
        throw new errors_1.UtamCompilerValidationError(parentNode, 13, [structure, propertyName]);
    }
    return node;
}
exports.assertNotNullObject = assertNotNullObject;
/**
 * Check that node is an object
 * @param node JSON node
 * @param structure validation context
 * @param objectName property name
 */
function assertIsObject(node, structure, objectName) {
    if (node.type !== 'object') {
        throw new errors_1.UtamCompilerValidationError(node, 13, [structure, objectName]);
    }
}
exports.assertIsObject = assertIsObject;
//# sourceMappingURL=assertions.js.map