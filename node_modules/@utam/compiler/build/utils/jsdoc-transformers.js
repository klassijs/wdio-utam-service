"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMethodJsDoc = exports.buildMethodDescription = exports.buildRootDescription = exports.textToJsDoc = void 0;
const code_1 = require("../utils/code");
/**
 * transform text into JS doc comment
 * @todo use replaceAll instead of replace when node 14 is deprecated (~April 2023)
 * @param text string for comment or undefined
 * @returns if text defined, return string wrapped as JS doc comment
 */
function textToJsDoc(text) {
    if (!text || text.length === 0) {
        return '';
    }
    const header = '/**';
    const footer = '*/'.padStart(3, ' ');
    const lines = text
        .filter((line) => line.length > 0)
        .map((line) => {
        // Note: we use RegExps with the global flag to match all occurences
        const htmlFriendlyLine = line
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\*\//g, '*&#47');
        return '* '.padStart(3, ' ').concat(htmlFriendlyLine);
    })
        .filter((line) => line.length > 0);
    return code_1.code `
        ${header}
        ${lines}
        ${footer}
    `;
}
exports.textToJsDoc = textToJsDoc;
/**
 * transform root description from Json to string array
 * @param jsonPath path to JSON source for class JsDoc
 * @param version page object version for class JsDoc
 * @param description from Json source
 * @returns string array with JsDoc lines or empty
 */
function buildRootDescription(jsonPath, version, description) {
    const DEFAULT_DESCRIPTION_AUTHOR = 'UTAM';
    const jsDocLines = [];
    const authorAndDeprecated = [];
    let author = DEFAULT_DESCRIPTION_AUTHOR;
    if (typeof description === 'string') {
        jsDocLines.push(description);
    }
    else {
        if (description) {
            jsDocLines.push(...description.text);
            if (description.author) {
                author = description.author;
            }
            if (description.deprecated) {
                authorAndDeprecated.push(`@deprecated ${description.deprecated}`);
            }
        }
    }
    authorAndDeprecated.unshift(`@author ${author}`);
    if (jsonPath) {
        jsDocLines.push(`generated from JSON ${jsonPath}`);
    }
    // version could be missing in config
    const versionStr = version ? version : new Date().toISOString();
    jsDocLines.push(`@version ${versionStr}`);
    jsDocLines.push(...authorAndDeprecated);
    return jsDocLines;
}
exports.buildRootDescription = buildRootDescription;
/**
 * transform method description from Json to string array
 * @param description from Json
 * @returns string array with JsDoc lines or empty
 */
function buildMethodDescription(description) {
    if (!description) {
        return [];
    }
    if (typeof description === 'string') {
        return [description];
    }
    const text = [...description.text];
    if (description.return) {
        text.push(`@return ${description.return}`);
    }
    if (description.throws) {
        text.push(`@throws ${description.throws}`);
    }
    if (description.deprecated) {
        text.push(`@deprecated ${description.deprecated}`);
    }
    return text;
}
exports.buildMethodDescription = buildMethodDescription;
/**
 * build string with method jsDoc
 * @param description string array with jsDoc lines
 * @param argNames non literal args names
 * @param argsDescriptionMap map of args description
 * @returns string with jsDoc for the method
 */
function buildMethodJsDoc(description, argNames, argsDescriptionMap) {
    const jsDocParams = argNames
        .map((argName) => {
        const argDescription = argsDescriptionMap[argName];
        return argDescription ? `@param ${argName} ${argDescription}` : '';
    })
        .filter((line) => line.length > 0);
    return textToJsDoc([...description, ...jsDocParams]);
}
exports.buildMethodJsDoc = buildMethodJsDoc;
//# sourceMappingURL=jsdoc-transformers.js.map