"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.singleToDoubleQuotes = exports.escapeDoubleQuotes = exports.buildAddedArgs = exports.code = void 0;
function getBaseIndentation(str) {
    const identMatch = /\n( +)/.exec(str);
    if (!identMatch) {
        return new RegExp('', 'gm');
    }
    return new RegExp(`^${identMatch[1]}`, 'gm');
}
function getChunkEndIndentation(str) {
    let newLineStart = str.length;
    while (newLineStart > 0 && str[newLineStart - 1] !== '\n') {
        newLineStart--;
    }
    let indentEnd = newLineStart;
    while (indentEnd < str.length && str[indentEnd] === ' ') {
        indentEnd++;
    }
    return str.slice(newLineStart, indentEnd);
}
function code(chunks, ...values) {
    const baseIndentation = getBaseIndentation(chunks[0]);
    let result = chunks[0].replace(baseIndentation, '');
    let currentIndentation = getChunkEndIndentation(result);
    for (let i = 1; i < chunks.length; i++) {
        const chunk = chunks[i].replace(baseIndentation, '');
        const value = values[i - 1];
        let formattedValue = Array.isArray(value) ? value.join('\n') : value;
        formattedValue = formattedValue.replace(/\n/g, `\n${currentIndentation}`);
        // Avoid empty lines in statements
        // TODO - remove empty lines in type definitions
        if (chunk === `\n${currentIndentation}` && formattedValue === '') {
            continue;
        }
        result += formattedValue + chunk;
        currentIndentation = getChunkEndIndentation(chunk);
    }
    return result.trim();
}
exports.code = code;
/**
 * Creates and  returns a string that represents a list of arguments separated by comma.
 * This function should be invoked during code generation when a list of arguments must be
 * built dynamically and append to existing arguments. If no arguments is passed, the
 * function returns an empty string which avoid trailing commas in generated page objects
 * code.
 *
 * @param args - arguments use to generate the list
 * @returns a string that represents the arguments to append to the existing ones
 */
function buildAddedArgs(args) {
    if (args.length < 1)
        return '';
    const SEMICOLON_SPACE = ', ';
    return `${SEMICOLON_SPACE}${args.join(SEMICOLON_SPACE)}`;
}
exports.buildAddedArgs = buildAddedArgs;
/**
 * escape all (not-already-escaped) double-quote chars in a string
 * For reference https://gist.github.com/getify/3667624
 * @param str input string
 * @returns string with escaped double quotes
 */
function escapeDoubleQuotes(str) {
    return str.replace(/\\([\s\S])|(")/g, '\\$1$2');
}
exports.escapeDoubleQuotes = escapeDoubleQuotes;
/**
 * replace single quotes (') with double quotes (\")
 * @param str input with single quotes
 * @returns output with double quotes
 */
function singleToDoubleQuotes(str) {
    return str.replace(/'/g, '"');
}
exports.singleToDoubleQuotes = singleToDoubleQuotes;
//# sourceMappingURL=code.js.map