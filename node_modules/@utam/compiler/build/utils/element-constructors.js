"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBasicElementCtorType = exports.mapBasicTypesToCtors = exports.createCtorNameFromTypes = void 0;
const class_body_1 = require("../codegen/class-body");
const shared_1 = require("../codegen/shared");
const naming_1 = require("./naming");
/**
 * Generates a Class name from the element type (for basic element).
 *
 * For instance, if an element is declared as ["editable", "clickable"], this function generates the string
 * ClickableEditableUtamElement. If no type is specified, it default to BasicUtamElement. This function is used
 * when we generate the statements for the basic elements getters.
 *
 * For basic elements, we generate an extra statement that will assign the mixed class returned by _createUtamElement
 * to a variable named after the value returned by this function. For example:
 *
 * const ActivableClickableUtamElement = createUtamMixinCtor(ActivableUtamElement, EditableUtamElement)
 *
 * @param type type of the element for which statements are being generated (parsed from JSON declaration)
 * @returns the class name for basic elements, an empty string for custom and container elements
 */
function createCtorNameFromTypes(type) {
    const UTAM_ELEMENT_SUFFIX = 'UtamElement';
    let constructorName = '';
    if (Array.isArray(type)) {
        constructorName =
            type.length > 0
                ? type
                    .sort()
                    .map((t) => naming_1.capitalize(t))
                    .join('')
                    .concat(UTAM_ELEMENT_SUFFIX)
                : shared_1.UTAM_ELEMENT_CTOR_BASE;
    }
    return constructorName;
}
exports.createCtorNameFromTypes = createCtorNameFromTypes;
/**
 * Generates the list of mixins that the function _createUtamElement must take to extend the base class.
 *
 * @param type type of the element for which statements are being generated (parsed from JSON declaration)
 * @returns the name of the mixins from which we want to extend the base class (BaseUtamElement)
 */
function mapBasicTypesToCtors(type) {
    return Array.isArray(type) ? `${type.map((t) => `_${class_body_1.getBasicElementTypeCtor(t)}`).join(', ')}` : '';
}
exports.mapBasicTypesToCtors = mapBasicTypesToCtors;
/**
 * Generates the type returned by an element getter used for it's type definition.
 *
 * For instance, if an element is declared as ["editable", "clickable"], this function generates the string
 * BasicUtamElement & ClickableUtamElement & EditableUtamElement.
 *
 * @param type type of the element for which statements are being generated (parsed from JSON declaration)
 * @returns the type of the value returned by the element getter method used for it's type definition
 */
function createBasicElementCtorType(type) {
    return `(_${shared_1.UTAM_ELEMENT_CTOR_BASE}${type
        .sort()
        .map((t) => class_body_1.getBasicElementTypeCtor(t))
        .reduce((returnedType, t) => `${returnedType} & _${t}`, '')})`;
}
exports.createBasicElementCtorType = createBasicElementCtorType;
//# sourceMappingURL=element-constructors.js.map