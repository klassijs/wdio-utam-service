"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImportNameFromPath = exports.buildImportNameFromModulePath = exports.elementToMethodName = exports.capitalize = exports.kebabcaseToCamelcase = void 0;
const path_1 = __importDefault(require("path"));
const imports_1 = require("./imports");
function kebabcaseToCamelcase(name, ignoreNamespace) {
    const newName = [];
    let nsFound = false;
    let upper = false;
    for (let i = 0; i < name.length; i++) {
        if (name[i] === '-') {
            if (!ignoreNamespace && !nsFound) {
                nsFound = true;
                newName.push('$');
            }
            else {
                upper = true;
            }
        }
        else {
            newName.push(upper ? name[i].toUpperCase() : name[i]);
            upper = false;
        }
    }
    return newName.join('');
}
exports.kebabcaseToCamelcase = kebabcaseToCamelcase;
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
exports.capitalize = capitalize;
/**
 * generate method name from an element name, ex. my_button -> getMyButton
 * @param name element name like 'myButton'
 * @param isPublic passed as true if method is public
 */
function elementToMethodName(name, isPublic) {
    // in case Element name contains _
    const camelCaseName = kebabcaseToCamelcase(name, true);
    // convention in JS to name private methods starting from underscore
    const privatePrefix = isPublic ? '' : '__';
    return `${privatePrefix}get${capitalize(camelCaseName)}`;
}
exports.elementToMethodName = elementToMethodName;
/**
 * Build suffix for the import type name in case of names collisions
 *
 * @param name short module name, ex. "Input"
 * @param module full module name to import type from, ex. "@utam/lightning/pageobjects/input"
 * @param typesTracker tracks names collisions
 * @returns suffix to be added to the type name
 */
function buildNameSuffix(name, module, typesTracker) {
    const moduleNames = typesTracker.get(name);
    // if module for this name is not same as first, it's names collision, so add suffix with number, ex. MyObject1
    if (moduleNames && moduleNames[0] !== module) {
        // if same module was already registered as collision, use already existing index moduleNames.indexOf(module)
        // otherwise use next available index moduleNames.length
        const suffix = (moduleNames.indexOf(module) > 0 ? moduleNames.indexOf(module) : moduleNames.length).toString();
        // remember name for this module, it can be used again in the same page object
        moduleNames.push(module);
        return suffix;
    }
    // remember module for the name
    typesTracker.set(name, [module]);
    return '';
}
/**
 * Generate the module import name from the module path
 * @param moduleSpecifier module path (i.e package-name/path/to/po)
 * @param typesTracker tracks names collisions
 * @returns the module import name
 */
function buildImportNameFromModulePath(moduleSpecifier, typesTracker) {
    const pageObjectName = path_1.default.basename(moduleSpecifier);
    const importName = capitalize(kebabcaseToCamelcase(pageObjectName));
    const suffix = buildNameSuffix(importName, moduleSpecifier, typesTracker);
    return importName.concat(suffix);
}
exports.buildImportNameFromModulePath = buildImportNameFromModulePath;
/**
 * Returns generated import name for custom elements and extensions
 * @param moduleSpecifier module path specifier
 * @param typesTracker tracks names collisions
 * @returns the import name of the module
 */
function getImportNameFromPath(moduleSpecifier, typesTracker) {
    return imports_1.buildIdentifier(buildImportNameFromModulePath(moduleSpecifier, typesTracker));
}
exports.getImportNameFromPath = getImportNameFromPath;
//# sourceMappingURL=naming.js.map