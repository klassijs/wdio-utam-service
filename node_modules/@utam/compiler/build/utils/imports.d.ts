import { ModuleImport, StatementsContext } from '../codegen/helpers/statements-transformer';
/**
 * Add an underscode to guarantee no conflict with anything in user land
 * an even more correct approach would be to use `${module}__${name}`
 * @param name original type name
 * @returns string with modified identifier
 */
export declare function buildIdentifier(name: string): string;
/**
 *
 * @param module full module name to import type from, ex. "@utam/lightning/pageobjects/input"
 * @param name short module name, ex. "Input"
 * @param imports map with imports: key is full module name, value is pairs of name and identifier
 * @param defaultImport indicates if import is default
 * @returns string with identifier, ex. "_Input"
 */
export declare function addImport(module: string, name: string, imports: Map<string, Map<string, string>>, defaultImport?: boolean): string;
/**
 * Update the module specifier by applying the replacement pattern if there's an alias for this type
 *
 * @param type type element type value (as declared in the JSON file)
 * @param aliasConfig type alias configuration mappings
 * @returns the original module specifier or the updated module specifier if there's an alias matching the type
 */
export declare function replaceTypeString(type: string, aliasConfig: Record<string, string>): string;
export declare function generateImports(importsMap: [string, Map<string, string>][], alias: Record<string, string>): string[];
/**
 * Impure function that updates the context object from the imports data.
 *
 * @param context compose statement context object
 * @param imports imports data used to update the context's imports
 */
export declare function addMissingImportsFromStatementsArgs(context: StatementsContext, imports: ModuleImport[]): void;
//# sourceMappingURL=imports.d.ts.map