import { By } from './lib/by';
import { Driver } from './lib/driver';
import { Element, ElementRectangle } from './lib/element';
export declare class ShadowRoot implements Element {
    driver: Driver;
    contextElement: Element;
    constructor(driver: Driver, element: Element);
    findElement(locator: By): Promise<Element>;
    findElements(locator: By): Promise<Element[]>;
    containsElement(locator: By): Promise<boolean>;
    containsElements(locator: By): Promise<number>;
    getCssValue(cssStyleProperty: string): Promise<string>;
    getAttribute(attributeName: string): Promise<string>;
    getRect(): Promise<ElementRectangle>;
    isDisplayed(): Promise<boolean>;
    isEnabled(): Promise<boolean>;
    hasFocus(): Promise<boolean>;
    isExisting(): Promise<boolean>;
    click(): Promise<void>;
    clearValue(): Promise<void>;
    addValue(arg: string): Promise<void>;
    setValue(arg: string): Promise<void>;
    press(key: string, options?: {
        text: string;
    }): Promise<void>;
    getValue(): Promise<string>;
    getText(): Promise<string>;
    scrollIntoView(arg?: boolean | {
        block: string;
    }): Promise<void>;
    moveTo(options?: {
        xOffset: number;
        yOffset: number;
    }): Promise<void>;
    dragAndDrop(target: {
        element?: Element;
        offset?: {
            x: number;
            y: number;
        };
    }, durationSec?: number): Promise<void>;
    flick(offset: {
        x: number;
        y: number;
    }): Promise<void>;
    blur(): Promise<void>;
    focus(): Promise<void>;
    doubleClick(): Promise<void>;
    rightClick(): Promise<void>;
    clickAndHold(durationSec?: number): Promise<void>;
}
//# sourceMappingURL=shadow-element.d.ts.map