import { By, Locator } from './lib/by';
import { Driver, MobileContextType, SerializableOrElement } from './lib/driver';
import { Element } from './lib/element';
export declare function validateElement(element?: Element): Element;
/**
 * base abstract class for a Page Object and an Element
 */
export declare abstract class UtamBase {
    protected driver: Driver;
    protected element?: Element;
    protected locator?: Locator;
    constructor(driver: Driver, element?: Element, locator?: Locator);
    /**
     * access to the element instance for subclasses
     * @param utamElement instance of the UTAM element
     * @returns instance of the Element
     */
    protected getUnwrappedElement(utamElement: UtamBase): Element;
    /**
     * check if element can be found, element is assumed to be not null
     * @returns false if element is stale, true is found, throws and error otherwise
     */
    isPresent(): Promise<boolean>;
    isVisible(): Promise<boolean>;
    waitFor<T>(condition: Promise<T> | ((...args: SerializableOrElement[]) => T | Promise<T>), ...args: SerializableOrElement[]): Promise<T>;
    waitForAbsence(): Promise<void>;
    waitForVisible(): Promise<void>;
    waitForInvisible(): Promise<void>;
    /**
     * checks if there is an element present with the given selector
     * @param locator selector to look for
     * @param expandShadow if set to true, look inside shadow root
     */
    containsElement(locator: By, expandShadow?: boolean): Promise<boolean>;
    /** mark a page object as a declarative interface */
    static isInterface: boolean;
    /** default context is web (covers both desktop and webviews) */
    static mobileContext: MobileContextType;
}
//# sourceMappingURL=utam-base.d.ts.map