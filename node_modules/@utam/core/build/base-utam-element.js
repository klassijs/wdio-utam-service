"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseUtamElement = void 0;
const utam_base_1 = require("./utam-base");
/**
 * base class for a Page Object element.
 * contains methods to get element state, actions like blur or focus are part of Actionable type
 */
class BaseUtamElement extends utam_base_1.UtamBase {
    constructor(driver, element) {
        super(driver, element);
    }
    getElement() {
        const element = utam_base_1.validateElement(this.element);
        return element;
    }
    getAttribute(attributeName) {
        if (!attributeName) {
            throw new Error('getAttribute method requires string parameter');
        }
        const element = utam_base_1.validateElement(this.element);
        return element.getAttribute(attributeName);
    }
    getClassAttribute() {
        const element = utam_base_1.validateElement(this.element);
        return element.getAttribute('class');
    }
    /**
     * Returns the CSS property value from the given CSS Property name
     * @param cssStyleProperty css property name
     * @returns the CSS property value when the property is found, an empty string otherwise
     */
    getCssPropertyValue(cssStyleProperty) {
        const element = utam_base_1.validateElement(this.element);
        return element.getCssValue(cssStyleProperty);
    }
    getText() {
        const element = utam_base_1.validateElement(this.element);
        return element.getText();
    }
    getTitle() {
        const element = utam_base_1.validateElement(this.element);
        return element.getAttribute('title');
    }
    getValue() {
        const element = utam_base_1.validateElement(this.element);
        return element.getValue();
    }
    isEnabled() {
        const element = utam_base_1.validateElement(this.element);
        return element.isEnabled();
    }
    /**
     * if invoked on the element without shadowRoot, check if current element is active inside driver
     * otherwise check if current element is same as shadowHost.shadowRoot.activeElement
     * @see https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/activeElement
     * @return true if current element is active
     */
    isFocused() {
        const element = utam_base_1.validateElement(this.element);
        return element.hasFocus();
    }
    /**
     * get element size and location
     * @returns element size and location
     */
    getRect() {
        const element = utam_base_1.validateElement(this.element);
        return element.getRect();
    }
}
exports.BaseUtamElement = BaseUtamElement;
//# sourceMappingURL=base-utam-element.js.map