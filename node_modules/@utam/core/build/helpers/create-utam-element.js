"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUtamMixinCtor = void 0;
const base_utam_element_1 = require("../base-utam-element");
/**
 * Ported from the mixwith package, credit to Justin Fagnani.
 *
 * This class is a semantic wrapper around mixins applications that allows to express
 * mixins composition in an elegant way.
 *
 * @see https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/
 * @see https://github.com/justinfagnani/mixwith.js
 */
class MixinBuilder {
    constructor(superclass) {
        this.superclass = superclass;
    }
    with(...mixins) {
        return mixins.reduce((c, mixin) => mixin(c), this.superclass);
    }
}
const mix = (superclass) => new MixinBuilder(superclass);
/**
 * This function is a facade to avoid exposing how we handle mutiple inheritance to
 * page object consumers. As basic elements types are now declared as a list of
 * interfaces that an element must satisfy, we can't use inheritance anymore.
 *
 * Using the mixins design pattern, we can create a Class that will augment the
 * Base Class with additional behavior. This function creates and return such a class.
 *
 * @param elementConstructors mixins that augments BaseUtamElement methods
 * @returns a Class that extends BaseUtamElement
 */
function createUtamMixinCtor(...elementConstructors) {
    return class UtamMixCtor extends mix(base_utam_element_1.BaseUtamElement).with(...elementConstructors) {
    };
}
exports.createUtamMixinCtor = createUtamMixinCtor;
//# sourceMappingURL=create-utam-element.js.map