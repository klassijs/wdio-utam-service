import { FrameUtamElement } from './frame-utam-element';
import { Locator } from './lib/by';
import { Driver, SerializableOrElement } from './lib/driver';
import { PageObjectCtor, UtamBaseRootPageObject } from './utam-page-object';
export declare class DocumentUtamElement {
    private driver;
    constructor(driver: Driver);
    waitFor<T>(condition: Promise<T> | ((...args: SerializableOrElement[]) => T | Promise<T>), ...args: SerializableOrElement[]): Promise<T>;
    waitForDocumentReady(): Promise<boolean>;
    containsElement(locator: Locator): Promise<boolean>;
    getUrl(): Promise<string>;
    /**
     * checks if given Root Page Object present, ex.
     * utam.getDocument().containsObject(MyModal)
     *
     * @param Ctor type of a Root Page Object
     * @returns true if given type of the Root Page Object present in browser
     */
    containsObject<T extends UtamBaseRootPageObject>(Ctor: PageObjectCtor<T>): Promise<boolean>;
    /**
     * Enters the (i)frame specified by the given frame element
     * @param frame frame element to enter into
     */
    enterFrame(frame: FrameUtamElement): Promise<void>;
    /**
     * Exits focus from a(n) (i)frame to the immediate parent frame
     * @remarks
     * If already at the top-level frame, this is a no-op
     */
    exitToParentFrame(): Promise<void>;
    /**
     * Exits focus from a(n) (i)frame to the page's default content
     * @remarks
     * If already at the top-level frame, this is a no-op
     */
    exitFrame(): Promise<void>;
    /**
     * Enters a frame or iframe element and loads the specified Page Object as loaded in the frame
     * @param frame rame element to enter into
     * @param Ctor Type of the Root Page Object to Return
     * @returns instance of the Page Object, loaded in the frame
     */
    enterFrameAndLoad<T extends UtamBaseRootPageObject>(frame: FrameUtamElement, Ctor: PageObjectCtor<T>): Promise<T>;
}
//# sourceMappingURL=document-utam-element.d.ts.map