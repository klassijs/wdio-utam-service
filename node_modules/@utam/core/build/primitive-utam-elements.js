"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TouchableUtamElement = exports.DraggableUtamElement = exports.EditableUtamElement = exports.ClickableUtamElement = exports.ActionableUtamElement = void 0;
const utam_base_1 = require("./utam-base");
function ActionableUtamElement(Base) {
    return class ActionableUtamElement extends Base {
        async blur() {
            const element = utam_base_1.validateElement(this.element);
            await element.blur();
        }
        async focus() {
            const element = utam_base_1.validateElement(this.element);
            await element.focus();
        }
        scrollToCenter() {
            const element = utam_base_1.validateElement(this.element);
            return element.scrollIntoView({ block: 'center' });
        }
        scrollToTop() {
            const element = utam_base_1.validateElement(this.element);
            return element.scrollIntoView(true);
        }
        moveTo() {
            const element = utam_base_1.validateElement(this.element);
            return element.moveTo();
        }
    };
}
exports.ActionableUtamElement = ActionableUtamElement;
function ClickableUtamElement(Base) {
    return class ClickableUtamElement extends Base {
        async click() {
            const element = utam_base_1.validateElement(this.element);
            try {
                await element.click();
            }
            catch (err) {
                // Force JS click due to ChromeDriver bug:
                // https://bugs.chromium.org/p/chromedriver/issues/detail?id=3684
                return this.javascriptClick(element);
            }
        }
        javascriptClick(element) {
            return this.driver.executeScript(function (el) {
                el.click();
            }, element);
        }
        doubleClick() {
            const element = utam_base_1.validateElement(this.element);
            return element.click();
        }
        rightClick() {
            const element = utam_base_1.validateElement(this.element);
            return element.rightClick();
        }
        clickAndHold(durationSec) {
            const element = utam_base_1.validateElement(this.element);
            return element.clickAndHold(durationSec);
        }
    };
}
exports.ClickableUtamElement = ClickableUtamElement;
function EditableUtamElement(Base) {
    return class EditableUtamElement extends Base {
        clear() {
            const element = utam_base_1.validateElement(this.element);
            return element.clearValue();
        }
        setText(arg) {
            const element = utam_base_1.validateElement(this.element);
            return element.addValue(arg);
        }
        press(key, options) {
            return this.driver.press(key, options);
        }
        clearAndType(value) {
            const element = utam_base_1.validateElement(this.element);
            return element.setValue(value);
        }
    };
}
exports.EditableUtamElement = EditableUtamElement;
function DraggableUtamElement(Base) {
    return class DraggableUtamElement extends Base {
        dragAndDrop(target, durationSec) {
            const fromElement = utam_base_1.validateElement(this.element);
            const destination = this.getUnwrappedElement(target);
            return fromElement.dragAndDrop({ element: destination }, durationSec);
        }
        dragAndDropByOffset(xOffset, yOffset, durationSec) {
            const fromElement = utam_base_1.validateElement(this.element);
            return fromElement.dragAndDrop({ offset: { x: xOffset, y: yOffset } }, durationSec);
        }
    };
}
exports.DraggableUtamElement = DraggableUtamElement;
function TouchableUtamElement(Base) {
    return class TouchableUtamElement extends Base {
        flick(xOffset, yOffset) {
            const fromElement = utam_base_1.validateElement(this.element);
            return fromElement.flick({ x: xOffset, y: yOffset });
        }
    };
}
exports.TouchableUtamElement = TouchableUtamElement;
//# sourceMappingURL=primitive-utam-elements.js.map