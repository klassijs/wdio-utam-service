"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtamBaseRootPageObject = exports.UtamBasePageObject = void 0;
const document_utam_element_1 = require("./document-utam-element");
const navigation_utam_element_1 = require("./navigation-utam-element");
const utam_base_1 = require("./utam-base");
/**
 * base class for all Page Objects
 */
class UtamBasePageObject extends utam_base_1.UtamBase {
    constructor(driver, element, locator) {
        super(driver, element, locator);
    }
    // This method gets invoked by the loader every time an instance is created
    // Its protected to "reduce" the invokability from user land
    async __beforeLoad__() {
        await this.getRootElement();
    }
    async getRootElement() {
        if (!this.element) {
            throw new Error('Unable to get root element: PageObject has not been initialized properly (element: undefined)');
        }
        const isPresent = await this.isPresent();
        if (!isPresent) {
            throw new Error(`Unable to get root element from pageObject "${this.constructor.name}". The element reference is stale or not in the DOM`);
        }
        return this.element;
    }
    getDocument() {
        return new document_utam_element_1.DocumentUtamElement(this.driver);
    }
    getNavigation() {
        return new navigation_utam_element_1.NavigationUtamElement(this.driver);
    }
}
exports.UtamBasePageObject = UtamBasePageObject;
/**
 * root Page Object represent higher order Page Objects that are located
 * directly inside browser or driver root
 */
class UtamBaseRootPageObject extends UtamBasePageObject {
    // overrides method from superclass UtamBasePageObject
    // only root page object is allowed to use root locator
    // public because called from tests
    async getRootElement() {
        if (!this.element) {
            if (!this.locator) {
                throw new Error('Unable to find element: No element or locator provided');
            }
            this.element = await this.driver.findElement(this.locator);
        }
        return super.getRootElement();
    }
    // overrides method from superclass UtamBase
    async isPresent() {
        // first try to find root because we can be in a state when it never was found (__beforeLoad__ override)
        if (!this.element) {
            await this.getRootElement();
        }
        return super.isPresent();
    }
    // exposed to access default root locator from Document.containsObject
    __getRootLocator__() {
        if (!this.locator) {
            throw new Error('Root locator is not provided');
        }
        return this.locator;
    }
    // override beforeLoad to wait for root element, which is most common case for root POs
    async __beforeLoad__() {
        await this.waitFor(() => this.getRootElement());
    }
}
exports.UtamBaseRootPageObject = UtamBaseRootPageObject;
//# sourceMappingURL=utam-page-object.js.map