import { BaseUtamElement } from './base-utam-element';
export interface ActionableUtamElement {
    blur: () => Promise<void>;
    focus: () => Promise<void>;
    scrollToCenter: () => Promise<void>;
    scrollToTop: () => Promise<void>;
    moveTo: () => Promise<void>;
}
export interface ClickableUtamElement {
    click: () => Promise<void>;
    doubleClick: () => Promise<void>;
    rightClick: () => Promise<void>;
    clickAndHold: (durationSec?: number) => Promise<void>;
}
export interface EditableUtamElement {
    clear: () => Promise<void>;
    setText: (arg: string) => Promise<void>;
    press: (key: string, options?: {
        text: string;
    }) => Promise<void>;
    clearAndType: (value: string) => Promise<void>;
}
export interface DraggableUtamElement {
    dragAndDrop: (target: BaseUtamElement, durationSec?: number) => Promise<void>;
    dragAndDropByOffset: (xOffset: number, yOffset: number, durationSec?: number) => Promise<void>;
}
export interface TouchableUtamElement {
    flick: (xOffset: number, yOffset: number) => Promise<void>;
}
declare type GConstructor<T = {}> = new (...args: any[]) => T;
export declare type UtamElementCtor = GConstructor<BaseUtamElement>;
export declare function ActionableUtamElement<TBase extends UtamElementCtor>(Base: TBase): UtamElementCtor;
export declare function ClickableUtamElement<TBase extends UtamElementCtor>(Base: TBase): UtamElementCtor;
export declare function EditableUtamElement<TBase extends UtamElementCtor>(Base: TBase): UtamElementCtor;
export declare function DraggableUtamElement<TBase extends UtamElementCtor>(Base: TBase): UtamElementCtor;
export declare function TouchableUtamElement<TBase extends UtamElementCtor>(Base: TBase): UtamElementCtor;
export {};
//# sourceMappingURL=primitive-utam-elements.d.ts.map