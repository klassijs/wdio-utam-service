"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentUtamElement = void 0;
const frame_utam_element_1 = require("./frame-utam-element");
const helper_methods_1 = require("./helper-methods");
class DocumentUtamElement {
    constructor(driver) {
        this.driver = driver;
    }
    waitFor(condition, ...args) {
        return this.driver.waitFor(condition, undefined, ...args);
    }
    waitForDocumentReady() {
        return this.driver.waitFor(() => {
            return this.driver.executeScript(function () {
                return document.readyState === 'complete';
            });
        });
    }
    containsElement(locator) {
        if (locator.using !== 'css selector') {
            throw Error('Only css locators are supported at this moment');
        }
        return this.driver.executeScript(function (selector) {
            return !!document.querySelector(selector);
        }, locator.value);
    }
    getUrl() {
        return this.driver.executeScript(function () {
            return document.URL;
        });
    }
    /**
     * checks if given Root Page Object present, ex.
     * utam.getDocument().containsObject(MyModal)
     *
     * @param Ctor type of a Root Page Object
     * @returns true if given type of the Root Page Object present in browser
     */
    async containsObject(Ctor) {
        const pageObjectInstance = new Ctor(this.driver);
        const locator = pageObjectInstance.__getRootLocator__();
        return this.containsElement(locator);
    }
    // (I)Frames APIs
    /**
     * Enters the (i)frame specified by the given frame element
     * @param frame frame element to enter into
     */
    enterFrame(frame) {
        const frameElement = frame_utam_element_1.FrameUtamElement.getUnwrappedElement(frame);
        return this.driver.enterFrame(frameElement);
    }
    /**
     * Exits focus from a(n) (i)frame to the immediate parent frame
     * @remarks
     * If already at the top-level frame, this is a no-op
     */
    exitToParentFrame() {
        return this.driver.exitToParentFrame();
    }
    /**
     * Exits focus from a(n) (i)frame to the page's default content
     * @remarks
     * If already at the top-level frame, this is a no-op
     */
    exitFrame() {
        return this.driver.exitFrame();
    }
    /**
     * Enters a frame or iframe element and loads the specified Page Object as loaded in the frame
     * @param frame rame element to enter into
     * @param Ctor Type of the Root Page Object to Return
     * @returns instance of the Page Object, loaded in the frame
     */
    async enterFrameAndLoad(frame, Ctor) {
        await this.enterFrame(frame);
        return await helper_methods_1.createInstanceAndWaitForRoot(Ctor, this.driver);
    }
}
exports.DocumentUtamElement = DocumentUtamElement;
//# sourceMappingURL=document-utam-element.js.map