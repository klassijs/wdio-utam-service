"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMessageFromConfig = exports.getConfiguredError = exports.setConfigMapIfEmpty = void 0;
/**
 * JSON with config file
 */
const errors_config_json_1 = __importDefault(require("./errors.config.json"));
/**
 * key is a error code, value is an error object
 */
const ERRORS_CONFIG_MAP = new Map();
/**
 * regex to replace %s in error messages
 */
const ARGS_TYPE_REGEX = /(%[s])/g;
/**
 * replace %s in the string with message
 * @param message string before replacement
 * @param args parameters to replace
 * @returns string with replaced parameters
 */
function replaceFormattingArguments(message, args) {
    if (!args) {
        return message;
    }
    const argx = args.slice();
    return message.replace(ARGS_TYPE_REGEX, function replaceArgs() {
        const argName = argx.shift();
        if (!argName) {
            throw new Error(`Incorrect number of args ${args.length} for message ${message}`);
        }
        return argName;
    });
}
/**
 * helper method to put errors config to map
 * exported because used in unit tests
 * @param arr array with configured errors
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setConfigMapIfEmpty(arr) {
    for (const i in arr) {
        const error = arr[i];
        const err = error;
        ERRORS_CONFIG_MAP.set(err.code, err);
    }
}
exports.setConfigMapIfEmpty = setConfigMapIfEmpty;
/**
 * get error object based on its code
 * @param errCode code of the error
 * @param errCode code with an error, currently number
 * @returns error object
 */
function getConfiguredError(errCode) {
    if (ERRORS_CONFIG_MAP.size === 0) {
        setConfigMapIfEmpty(errors_config_json_1.default);
    }
    if (ERRORS_CONFIG_MAP.has(errCode)) {
        const res = ERRORS_CONFIG_MAP.get(errCode);
        if (res) {
            return res;
        }
    }
    throw new Error(`Can't find message configured for code ${errCode}`);
}
exports.getConfiguredError = getConfiguredError;
/**
 * build full error message
 * @param error error object
 * @param args format parameters to replace in the message
 * @returns string with full error message
 */
function buildMessageFromConfig(error, args) {
    const { category, code, message, docs, tip } = error;
    const errType = category ? category : 'error';
    let str = `${errType} ${code}: ${replaceFormattingArguments(message, args)}`;
    if (error.docs) {
        str = str.concat(`; \nsee documentation ${docs}`);
    }
    if (error.tip) {
        str = str.concat(`; \ntip: ${tip}`);
    }
    return str;
}
exports.buildMessageFromConfig = buildMessageFromConfig;
//# sourceMappingURL=errors.js.map