/**
 * Capitalize the message passed as an argument
 *
 * @param message the text to capitalized
 * @returns the text capitalized
 */
export declare function capitalizeFirstLetter(message: string): string;
/**
 * Stringify an iterable object and enclose it in curly braces.
 * This function should be used for:
 * - representing set of finite values in error messages from iterables.
 * - indicates that the value can be either one or the other
 * The current implementation has a consistent formatting for Set & Array
 *
 * @example stringifyIterableInBraces(['web', 'native']) => '{"native", "web"}'
 * @example stringifyIterableInBraces(new Set(['web', 'native'])) => '{"native", "web"}'
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables
 * @param iterable iterable object
 * @returns a string representing the iterable items enclosed in curly braces
 */
export declare function stringifyIterableInBraces<T>(iterable: Iterable<T>): string;
/**
 * Stringify an iterable object and enclose it in brackets.
 * This function should be for representing several values.
 * For instance, if the page object contains two selectors ("accessid", "css")
 * The current implementation has a consistent formatting for Set & Array
 *
 * @example stringifyIterableInBraces(['accessid', 'css']) => '["accessid", "css"]'
 * @example stringifyIterableInBraces(new Set(['accessid', 'css'])) => '["accessid", "css"]'
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables
 * @param iterable iterable object
 * @returns a string representing the iterable items enclosed in brackets
 */
export declare function stringifyIterableInBrackets<T>(iterable: Iterable<T>): string;
/**
 * Turn an iterable into a string that represents a readable list
 *
 * @example ['actionable', 'clickable', 'editable'] => "actionable", "clickable" and "editable"
 * @example new Set(['actionable', 'clickable']) => "actionable" and "clickable"
 * @param words words for which we want to build the string
 * @returns a readable list in the form "actionable", "clickable", "editable"
 */
export declare function stringifyIterableInHumanReadableList<T>(iterable: Iterable<T>): string;
/**
 * Construct the prefix of the message for exclusive keys in the format Either key1 or key2 or key3 ...
 *
 * @param keys exclusive keys that shouldn't be set at the same time (i.e applyExternal & apply for utility)
 * @returns prefix of the error message listing all exclusive keys
 */
export declare function buildExclusiveKeysPrefix(keys: string[]): string;
//# sourceMappingURL=formatters.d.ts.map