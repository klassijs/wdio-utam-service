"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildExclusiveKeysPrefix = exports.stringifyIterableInHumanReadableList = exports.stringifyIterableInBrackets = exports.stringifyIterableInBraces = exports.capitalizeFirstLetter = void 0;
// - This module should contains all functionalities used in diagnostics message formatting.
/**
 * Capitalize the message passed as an argument
 *
 * @param message the text to capitalized
 * @returns the text capitalized
 */
function capitalizeFirstLetter(message) {
    return message.charAt(0).toUpperCase() + message.slice(1);
}
exports.capitalizeFirstLetter = capitalizeFirstLetter;
/**
 * Stringify an iterable object and enclose it in curly braces.
 * This function should be used for:
 * - representing set of finite values in error messages from iterables.
 * - indicates that the value can be either one or the other
 * The current implementation has a consistent formatting for Set & Array
 *
 * @example stringifyIterableInBraces(['web', 'native']) => '{"native", "web"}'
 * @example stringifyIterableInBraces(new Set(['web', 'native'])) => '{"native", "web"}'
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables
 * @param iterable iterable object
 * @returns a string representing the iterable items enclosed in curly braces
 */
function stringifyIterableInBraces(iterable) {
    return wrapInCurlyBraces(stringifyIterable(iterable));
}
exports.stringifyIterableInBraces = stringifyIterableInBraces;
/**
 * Stringify an iterable object and enclose it in brackets.
 * This function should be for representing several values.
 * For instance, if the page object contains two selectors ("accessid", "css")
 * The current implementation has a consistent formatting for Set & Array
 *
 * @example stringifyIterableInBraces(['accessid', 'css']) => '["accessid", "css"]'
 * @example stringifyIterableInBraces(new Set(['accessid', 'css'])) => '["accessid", "css"]'
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables
 * @param iterable iterable object
 * @returns a string representing the iterable items enclosed in brackets
 */
function stringifyIterableInBrackets(iterable) {
    return wrapInBrackets(stringifyIterable(iterable));
}
exports.stringifyIterableInBrackets = stringifyIterableInBrackets;
/**
 * Turn an iterable into a string that represents a readable list
 *
 * @example ['actionable', 'clickable', 'editable'] => "actionable", "clickable" and "editable"
 * @example new Set(['actionable', 'clickable']) => "actionable" and "clickable"
 * @param words words for which we want to build the string
 * @returns a readable list in the form "actionable", "clickable", "editable"
 */
function stringifyIterableInHumanReadableList(iterable) {
    const words = [...iterable];
    const lastItem = words.slice(-1)[0];
    return words
        .slice(0, -1)
        .map(wrapInDoubleQuotes)
        .join(', ')
        .concat(`, ${wrapInDoubleQuotes(lastItem)}`);
}
exports.stringifyIterableInHumanReadableList = stringifyIterableInHumanReadableList;
/**
 * Construct the prefix of the message for exclusive keys in the format Either key1 or key2 or key3 ...
 *
 * @param keys exclusive keys that shouldn't be set at the same time (i.e applyExternal & apply for utility)
 * @returns prefix of the error message listing all exclusive keys
 */
function buildExclusiveKeysPrefix(keys) {
    let message = 'Either ';
    for (const [index, key] of keys.entries()) {
        message += `"${key}"`;
        if (!(index === keys.length - 1)) {
            message += ` or `;
        }
    }
    return message;
}
exports.buildExclusiveKeysPrefix = buildExclusiveKeysPrefix;
/**
 * Sort function used to sort words in alphabetical order without considering the case
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
 * @param first first element for comparison
 * @param second second element for comparison
 * @returns a number representing the result of the comparaison
 */
function sortAlphabeticallyIgnoringCase(first, second) {
    return first.localeCompare(second);
}
/**
 * Closure that is used to create wrapping functions.
 *
 * @example const wrapInCurlyBraces = wrapInChars('curlybraces');
 * @example wrapInCurlyBraces("some text") => '{"some text"}'
 * @param enclosingChar value that indicates with character the returned function will used to enclose the string
 * @returns a function that can be used to wrap strings
 */
function wrapInChars(enclosingChar) {
    const charMap = {
        doublequotes: ['"', '"'],
        brackets: ['[', ']'],
        curlybraces: ['{', '}'],
    };
    return function wrap(text) {
        const [start, end] = charMap[enclosingChar];
        return `${start}${text}${end}`;
    };
}
const wrapInCurlyBraces = wrapInChars('curlybraces');
const wrapInDoubleQuotes = wrapInChars('doublequotes');
const wrapInBrackets = wrapInChars('brackets');
/**
 * Formatting function that apply a sequence of operations to stringify an iterable
 * The current implementation has a consistent formatting for Set & Array
 *
 * @example stringifyIterable(['native', 'web']) => '"native", "web"'
 * @example stringifyIterable(new Set(['web', 'native'])) => '"native", "web"'
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables
 * @param iterable iterable object
 * @returns a string that represents the iterable with its items sorted and comma-separated
 */
function stringifyIterable(iterable) {
    return [...iterable].map(wrapInDoubleQuotes).sort(sortAlphabeticallyIgnoringCase).join(', ');
}
//# sourceMappingURL=formatters.js.map