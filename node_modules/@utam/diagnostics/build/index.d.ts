export declare type Position = {
    /** offset of the last read token */
    offset: number;
    /** current line number */
    line?: number;
    /** length of the last read token */
    length?: number;
    /** current token column */
    column?: number;
};
export interface GenericDiagnostic {
    message: string;
    position?: Position;
}
export { buildMessageFromConfig, getConfiguredError } from './errors';
export declare const descriptions: {
    JSON: {
        INVALID_PROPERTY_KEY: (key: string, structure: string, properties: string[], position: Position) => GenericDiagnostic;
        INVALID_TYPE_FOR_VALUE: (key: string, structure: string, expectedType: string, actualType: string, position: Position) => GenericDiagnostic;
        REQUIRED_KEY_ON_STRUCTURE: (key: string, structure: string, position?: Position | undefined) => GenericDiagnostic;
        REQUIRED_EXCLUSIVE_KEYS_ON_STRUCTURE: (keys: string[], structure: string, position?: Position | undefined) => GenericDiagnostic;
        REDUNDANT_PROPERTY_KEY_FOR_STRUCTURE: (key: string, structureType: string, position?: Position | undefined) => GenericDiagnostic;
        DUPLICATE_NODE_DECLARED: (name: string, structureType: string, position: Position) => GenericDiagnostic;
    };
    ARGS: {
        REDUNDANT_KEYS: (structure: string) => GenericDiagnostic;
        ONLY_VALUE_SUPPORTED: (structureType: string, position?: Position | undefined) => GenericDiagnostic;
        VALUE_NOT_SUPPORTED: (structure: string, position?: Position | undefined) => GenericDiagnostic;
        MISSING_REQUIRED_TYPE_KEY_LITERAL_ARG: (structure: string, expectedType: string, position?: Position | undefined) => GenericDiagnostic;
        INVALID_PAGE_OBJECT_TYPE_VALUE: (structure: string, value: string, position?: Position | undefined) => GenericDiagnostic;
        EMPTY_METHOD_ARGS: (structure: string, position?: Position | undefined) => GenericDiagnostic;
        NONEXISTENT_ARGUMENT_REFERENCE: (structure: string, argName: string, position?: Position | undefined) => GenericDiagnostic;
        UNSUPPORTED_NESTED_ARGS: (structure: string, position?: Position | undefined) => GenericDiagnostic;
        DESCRIPTION_NOT_SUPPORTED: (position?: Position | undefined) => GenericDiagnostic;
    };
    ROOT: {
        REQUIRED_SELECTOR_IF_ROOT: (position: Position) => GenericDiagnostic;
        REDUNDANT_SELECTOR: () => GenericDiagnostic;
        BEFORE_LOAD_UNSUPPORTED_ELEMENT: (position: Position) => GenericDiagnostic;
        PLATFORM_INVALID_VALUE: <T, U>(value: T, validValues: Iterable<U>, position: Position) => GenericDiagnostic;
        REQUIRED_IMPLEMENTS_IF_PROFILE: (position: Position) => GenericDiagnostic;
    };
    ELEMENT: {
        INVALID_BASIC_ELEMENT_TYPE: <T_1>(type: string, basicTypes: Iterable<T_1>, position?: Position | undefined) => GenericDiagnostic;
        DUPLICATE_BASIC_TYPE: (type: string, elementName: string, position?: Position | undefined) => GenericDiagnostic;
        INVALID_ELEMENT_TYPE: <T_2>(type: string, basicTypes: Iterable<T_2>, position?: Position | undefined) => GenericDiagnostic;
        INVALID_CUSTOM_TYPE: (type: string) => GenericDiagnostic;
        INVALID_FILTER_WITHOUT_SELECTOR_LIST: (elementName: string, position: Position) => GenericDiagnostic;
        LIST_CANNOT_HAVE_NESTED_ELEMENTS: (name: string, position?: Position | undefined) => GenericDiagnostic;
        ONLY_BASIC_TYPE_CAN_HAVE_NESTED_ELEMENTS: (name: string, position?: Position | undefined) => GenericDiagnostic;
        INVALID_FILTER_MATCHER: (structure: string, matcherType: string, matcherTypes: string[], position: Position) => GenericDiagnostic;
        UNSUPPORTED_FILTER_MATCHER: (structure: string, action: string, matcherType: string, matcherTypes: string[], position: Position) => GenericDiagnostic;
    };
    METHOD: {
        EMPTY_DECLARATION: (methodName: string, position: Position) => GenericDiagnostic;
        NONEXISTENT_ELEMENT_REFERENCE: (structure: string, elementName: string, position?: Position | undefined) => GenericDiagnostic;
        UNSUPPORTED_RETURN_TYPE_VALUE: (structure: string, returnTypeValue: string, position?: Position | undefined) => GenericDiagnostic;
        INVALID_RETURN_TYPE_NEXT_STATEMENT_IS_CHAIN: (structure: string, position?: Position | undefined) => GenericDiagnostic;
        INFERRED_TYPE_NOT_CUSTOM_NEXT_STATEMENT_IS_CHAIN: (structure: string, inferredReturnType: string) => GenericDiagnostic;
    };
    ACTION: {
        UNKNOWN_APPLICABLE_METHOD: (structure: string, apply: string, elementType: string | string[], position?: Position | undefined) => GenericDiagnostic;
        INVALID_APPLICABLE_TYPE: (structure: string, apply: string, applicableTypes: string[], position?: Position | undefined) => GenericDiagnostic;
        APPLICABLE_ONLY_TO_LIST: (structure: string, apply: string, position?: Position | undefined) => GenericDiagnostic;
        INVALID_RETURN_SELF_NOT_LAST_STATEMENT: (structure: string, position?: Position | undefined) => GenericDiagnostic;
    };
    SELECTOR: {
        VALUE_CANT_BE_EMPTY: (structure: string, supportedSelectors: string[], position?: Position | undefined) => GenericDiagnostic;
        DUPLICATE_SELECTOR_STRATEGIES: (selectors: string[], supportedSelectors: string[], position?: Position | undefined) => GenericDiagnostic;
        CLASS_CHAIN_INVALID_QUOTES: (position?: Position | undefined) => GenericDiagnostic;
        CLASS_CHAIN_INVALID_OPERATORS: <T_3>(selector: string, operators: Iterable<T_3>, position?: Position | undefined) => GenericDiagnostic;
        UIAUTOMATOR_UNSUPPORTED_METHOD: <T_4>(method: string, operators: Iterable<T_4>, position?: Position | undefined) => GenericDiagnostic;
    };
};
export declare const generation: {
    ARGS: {
        INCORRECT_COUNT: (validationContext: string, expectedCount: number, actualCount: number) => GenericDiagnostic;
        INCORRECT_TYPE: (validationContext: string, argNameOrValue: string | number | boolean, expectedType: string, actualType: string, position?: Position | undefined) => GenericDiagnostic;
        SELECTOR_MISSING_ARGUMENT: (selectorString: string, args: string[]) => GenericDiagnostic;
        COMPOSE_METHOD_DUPLICATED_ARGUMENT_NAMES: (argName: string, methodName: string) => GenericDiagnostic;
    };
};
//# sourceMappingURL=index.d.ts.map