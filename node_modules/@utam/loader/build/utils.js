"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInjectionConfig = exports.validateInjectionConfig = exports.isLoaderConfig = void 0;
function isString(x) {
    return typeof x === 'string';
}
function isObject(x) {
    return typeof x === 'object' && x !== null;
}
function isArray(x) {
    return Array.isArray(x);
}
function isProfileImplementation(x) {
    return !!(x &&
        isObject(x) &&
        'interface' in x &&
        isString(x.interface) &&
        'implementation' in x &&
        isString(x.implementation));
}
function isListOfProfileImplementation(x) {
    return isArray(x) && x.every((i) => isProfileImplementation(i));
}
function isLoaderConfig(x) {
    return !!(x &&
        isObject(x) &&
        Object.values(x).every((v) => isObject(v) && Object.values(v).every((i) => isListOfProfileImplementation(i))));
}
exports.isLoaderConfig = isLoaderConfig;
function validateInjectionConfig(config) {
    if (!isLoaderConfig(config)) {
        throw new Error('Unvalid loader configuration');
    }
    return config;
}
exports.validateInjectionConfig = validateInjectionConfig;
function getInjectionConfig(configPath) {
    const isJSON = configPath.endsWith('.json');
    if (!isJSON) {
        throw new Error(`Utam: profile config must be declared in a JSON file`);
    }
    try {
        return require(configPath);
    }
    catch (error) {
        if (isJSON) {
            throw new Error(`Utam: Failed to parse profile config file ${configPath}\n`);
        }
        else {
            throw error;
        }
    }
}
exports.getInjectionConfig = getInjectionConfig;
//# sourceMappingURL=utils.js.map