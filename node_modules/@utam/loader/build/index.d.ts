import { By, DocumentUtamElement, Driver, Element, FrameUtamElement, Navigation, PageObjectCtor, UtamBasePageObject, UtamBaseRootPageObject } from '@utam/core';
/**
 * when we create non-root (orphan) Page Object it needs scope
 * @param element scope of the PO (if not defined - scope inside driver)
 * @param injectedRoot locator to inject as root (if not defined - it's root PO and we use its default root)
 */
export interface UtamPageObjectScope<T> {
    locator?: By;
    element?: T;
}
/**
 * loader configuration is passed to UtamLoader as parameter and is responsible for:
 * set active profiles (uasage to be added)
 */
export interface UtamLoaderConfig<T> {
    /** Active profiles to set in the loader instantiation */
    activeProfiles?: Record<string, string>;
    /** Adapter function that creates a UTAM Element */
    elementAdapter?: (rawElement: T) => Element;
    /** Bridge app title for mobile automation */
    bridgeAppTitle?: string;
    /** List of dependency injections configuration files paths */
    injectionConfigs?: string[];
}
export declare class UtamLoader<T> {
    private _driver;
    private _config;
    private _elementAdapter?;
    private _document?;
    /** Instance of the Navigation object */
    private _navigation?;
    /** Active profiles set implicitly in the loader instantiation or explictly in UI tests through setProfile(s) APIs */
    private _activeProfiles;
    /** Available profiles loaded from the profile configuration files via the setLoaderConfig API */
    private _availableProfiles;
    private _configLoader;
    By: typeof By;
    constructor(driver: Driver, config?: UtamLoaderConfig<T>);
    /**
     * @todo take some time to rethink and simplify internal representation or profiles
     * @param UtamCtor Page Object Interface Constructor for which we load a matching implementation
     * @returns the imported implementation of the Page Object
     */
    getInterfaceImplementation<U extends UtamBasePageObject | UtamBaseRootPageObject, V = PageObjectCtor<U>>(UtamCtor: V): Promise<V>;
    /**
     * Loads dependency injection configurations in memory from a list of config paths.
     * This function isn't part of the loader public API and is used only in it's constructor
     * to load the dependency injection configs in memory. The filepath can be either:
     * - absolute on the file system (i.e /Users/foo/project/path/to/configfile.json)
     * - bare specifier appended with the exposed path to the config file (i.e my-package/path/to/configfile.json)
     * @param dependencyConfigFilepaths list of dependency injection config paths
     */
    private setInjectionConfigs;
    setProfiles(...profiles: Record<string, string>[]): void;
    setProfile(name: string, value: string): void;
    /**
     * creates instance of the Page Object and waits for presence of its root element
     * @param Ctor type/constructor for PO
     * @param scope injected selector
     */
    load<U extends UtamBasePageObject>(Ctor: PageObjectCtor<U>, scope?: UtamPageObjectScope<T>): Promise<U>;
    /**
     * exposes Curent Document API from loader, ex. utam.getCurrentDocument().getUrl()
     *
     * @returns instance of a Document object
     */
    getCurrentDocument(): DocumentUtamElement;
    /**
     * exposes Navigation API from loader
     *
     * @returns instance of a Navigation object
     */
    getNavigation(): Navigation;
    /**
     * Enters the (i)frame specified by the given frame element
     * @param frame frame element to enter into
     */
    enterFrame(frame: FrameUtamElement): Promise<void>;
    /**
     * Exits focus from a(n) (i)frame to the immediate parent frame
     * @remarks
     * If already at the top-level frame, this is a no-op
     */
    exitToParentFrame(): Promise<void>;
    /**
     * Exits focus from a(n) (i)frame to the page's default content
     * @remarks If already at the top-level frame, this is a no-op
     */
    exitFrame(): Promise<void>;
    /**
     * Enters a frame or iframe element and loads the specified Page Object as loaded in the frame
     * @param frame rame element to enter into
     * @param Ctor Type of the Root Page Object to Return
     * @returns instance of the Page Object, loaded in the frame
     */
    enterFrameAndLoad<T extends UtamBaseRootPageObject>(frame: FrameUtamElement, Ctor: PageObjectCtor<T>): Promise<T>;
    /**
     * mobile only - set bridge app title in loader config
     * @param title string with title
     */
    setBridgeAppTitle(title: string): void;
    /**
     * mobile only - get bridge app title from loader config
     */
    getBridgeAppTitle(): string | undefined;
    /**
     * Utility method to wrap action in test into fluent wait
     * @param condition condition or function to wait for
     * @param timeoutMsec optional custom timeout, if not set will use one from config
     */
    waitFor<T>(condition: Promise<T> | (() => T | Promise<T>), timeoutMsec?: number): Promise<T>;
}
//# sourceMappingURL=index.d.ts.map