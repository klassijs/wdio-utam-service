import type { ProfileDependencyConfig, InterfaceImplementation } from '@utam/types';
/**
 * Represents the loaedProfiles Map key format where:
 * - the first string is the profile name
 * - the second string is the profile value
 * @example "platform_ios_phone"
 * @todo use this type for the map key once we updated the whole babel ecosystem as it's not supported in our version
 */
export declare class UtamConfigLoader {
    /**
     * In memory profiles loaded from the profile configuration file.
     * The key are the profile name suffixed by the profile value.
     * The values are an arry of interface and their associated implementation
     * @example { "platform_ios_phone": [{interface: 'path/to/interface', implementation: 'path/to/impl'}] }
     * @todo replace the key type "string" with MapKey after updated the deps
     */
    private _loadedProfiles;
    constructor();
    /**
     * Loads a profile configuration file in memory.
     * @remark this function can be called several times and will append profiles values to existing profiles
     * @example loadConfig('utam-pageobjects/profile.config.json')
     * @param config config path
     */
    loadConfig(config: string): void;
    /**
     * Returns the profiles loaded in memory. This function is used by the loader to get the list of all available
     * profiles
     */
    getLoadedProfiles(): Map<string, InterfaceImplementation[]>;
    /**
     * Recursive function that transform the profile configuration file to the format stored in memory
     * This function merge the profile name and key together and assign the profile values to that key
     * @param obj current object being traversed
     * @param parentKey name of the parent key (e.g "platform")
     */
    protected traverseConfig(obj: ProfileDependencyConfig | InterfaceImplementation[], parentKey?: string): void;
    /**
     * Utility method that abstract the addition of new profile.
     * It appends the new profiles values if the profile key already exists otherwise it creates a new key value pair
     * @param key name of the key for which we want to add a new profile
     * @param value value to add or append in the key
     */
    private appendItem;
}
//# sourceMappingURL=config-loader.d.ts.map