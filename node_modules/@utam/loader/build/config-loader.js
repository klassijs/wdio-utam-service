"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtamConfigLoader = void 0;
const utils_1 = require("./utils");
/**
 * Represents the loaedProfiles Map key format where:
 * - the first string is the profile name
 * - the second string is the profile value
 * @example "platform_ios_phone"
 * @todo use this type for the map key once we updated the whole babel ecosystem as it's not supported in our version
 */
//type MapKey = `${string}_${string}`
class UtamConfigLoader {
    constructor() {
        this._loadedProfiles = new Map();
    }
    /**
     * Loads a profile configuration file in memory.
     * @remark this function can be called several times and will append profiles values to existing profiles
     * @example loadConfig('utam-pageobjects/profile.config.json')
     * @param config config path
     */
    loadConfig(config) {
        const configToValidate = utils_1.getInjectionConfig(config);
        const profileConfig = utils_1.validateInjectionConfig(configToValidate);
        this.traverseConfig(profileConfig);
    }
    /**
     * Returns the profiles loaded in memory. This function is used by the loader to get the list of all available
     * profiles
     */
    getLoadedProfiles() {
        return this._loadedProfiles;
    }
    /**
     * Recursive function that transform the profile configuration file to the format stored in memory
     * This function merge the profile name and key together and assign the profile values to that key
     * @param obj current object being traversed
     * @param parentKey name of the parent key (e.g "platform")
     */
    traverseConfig(obj, parentKey = '') {
        for (const [key, value] of Object.entries(obj)) {
            if (Array.isArray(value)) {
                this.appendItem(`${parentKey}_${key}`, value);
            }
            if (typeof value === 'object' && value !== null) {
                this.traverseConfig(value, key);
            }
        }
    }
    /**
     * Utility method that abstract the addition of new profile.
     * It appends the new profiles values if the profile key already exists otherwise it creates a new key value pair
     * @param key name of the key for which we want to add a new profile
     * @param value value to add or append in the key
     */
    appendItem(key, value) {
        const existingProfiles = this._loadedProfiles.get(key);
        if (!existingProfiles) {
            this._loadedProfiles.set(key, value);
        }
        else {
            this._loadedProfiles.set(key, [...existingProfiles, ...value]);
        }
    }
}
exports.UtamConfigLoader = UtamConfigLoader;
//# sourceMappingURL=config-loader.js.map